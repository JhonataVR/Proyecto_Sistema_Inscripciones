# Generated by Django 5.2.1 on 2025-05-16 05:07

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Carrera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, unique=True)),
                ('descripcion', models.TextField(blank=True)),
                ('duracion', models.PositiveSmallIntegerField(help_text='Duración en semestres', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('rol', models.CharField(choices=[('estudiante', 'Estudiante'), ('docente', 'Docente'), ('admin', 'Administrador')], max_length=20)),
                ('ci', models.CharField(max_length=20, unique=True)),
                ('telefono', models.CharField(blank=True, max_length=20)),
                ('direccion', models.CharField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Docente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100)),
                ('especialidad', models.CharField(max_length=100)),
                ('fecha_contratacion', models.DateField()),
                ('usuario', models.OneToOneField(limit_choices_to={'rol': 'docente'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Estudiante',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matricula', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='La matrícula debe tener 2 letras mayúsculas y 4 números', regex='^[A-Z]{2}\\d{4}$')])),
                ('fecha_ingreso', models.DateField()),
                ('carrera', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='estudiantes', to='inscripciones.carrera')),
                ('usuario', models.OneToOneField(limit_choices_to={'rol': 'estudiante'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Materia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('sigla', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='La sigla debe tener 2-3 letras mayúsculas seguidas de 3 números', regex='^[A-Z]{2,3}\\d{3}$')])),
                ('creditos', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('horas_academicas', models.PositiveSmallIntegerField()),
                ('nivel', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('carrera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materias', to='inscripciones.carrera')),
            ],
            options={
                'verbose_name_plural': 'Materias',
                'ordering': ['nivel', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paralelo', models.CharField(max_length=5)),
                ('gestion', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Formato de gestión: YYYY-YYYY', regex='^20\\d{2}-20\\d{2}$')])),
                ('modalidad', models.CharField(choices=[('presencial', 'Presencial'), ('virtual', 'Virtual'), ('hibrido', 'Híbrido')], max_length=20)),
                ('cupo', models.PositiveSmallIntegerField(default=30)),
                ('docente', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='grupos', to='inscripciones.docente')),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grupos', to='inscripciones.materia')),
            ],
            options={
                'unique_together': {('materia', 'paralelo', 'gestion')},
            },
        ),
        migrations.CreateModel(
            name='RecordAcademico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('materias_aprobadas', models.PositiveSmallIntegerField(default=0)),
                ('materias_reprobadas', models.PositiveSmallIntegerField(default=0)),
                ('total_creditos', models.PositiveSmallIntegerField(default=0)),
                ('promedio_general', models.DecimalField(decimal_places=2, default=0.0, max_digits=4)),
                ('estudiante', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='record', to='inscripciones.estudiante')),
            ],
        ),
        migrations.CreateModel(
            name='Calificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('resultado', models.CharField(choices=[('Aprobado', 'Aprobado'), ('Reprobado', 'Reprobado')], editable=False, max_length=20)),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calificaciones', to='inscripciones.estudiante')),
                ('grupo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calificaciones', to='inscripciones.grupo')),
            ],
            options={
                'verbose_name_plural': 'Calificaciones',
                'unique_together': {('estudiante', 'grupo')},
            },
        ),
        migrations.CreateModel(
            name='Inscripcion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inscripcion', models.DateTimeField(auto_now_add=True)),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscripciones', to='inscripciones.estudiante')),
                ('grupo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inscripciones', to='inscripciones.grupo')),
            ],
            options={
                'verbose_name_plural': 'Inscripciones',
                'unique_together': {('estudiante', 'grupo')},
            },
        ),
        migrations.CreateModel(
            name='MateriaRequisito',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('materia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requisitos_para', to='inscripciones.materia')),
                ('requisito', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='es_requisito_de', to='inscripciones.materia')),
            ],
            options={
                'verbose_name_plural': 'Requisitos de materias',
                'unique_together': {('materia', 'requisito')},
            },
        ),
    ]
